#
#
# Rust
#
#
[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
auto-format = true
indent = { tab-width = 4, unit = "  " }
language-servers = ["rust-analyzer", "tailwindcss-ls"]

[[grammar]]
name = "rust"
source = { git = "https://github.com/tree-sitter/tree-sitter-rust", rev = "a360da0a29a19c281d08295a35ecd0544d2da211" }

[language-server.tailwindcss-ls]
config = { userLanguages = { rust = "html", "*.rs" = "html" } }

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false

[language-server.rust-analyzer.config.check]
command = "clippy"

[language.debugger]
name = "lldb-dap"
transport = "stdio"
command = "lldb-dap"

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { program = "{0}" }

[[language.debugger.templates]]
name = "binary (terminal)"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { program = "{0}", runInTerminal = true }

[[language.debugger.templates]]
name = "attach"
request = "attach"
completion = [ "pid" ]
args = { pid = "{0}" }

[[language.debugger.templates]]
name = "gdbserver attach"
request = "attach"
completion = [ { name = "lldb connect url", default = "connect://localhost:3333" }, { name = "file", completion = "filename" }, "pid" ]
args = { attachCommands = [ "platform select remote-gdb-server", "platform connect {0}", "file {1}", "attach {2}" ] }

#
#
# Go
#
#
[[language]]
name = "go"
roots = ["go.work", "go.mod"]
auto-format = true
comment-token = "//"
language-servers = [ "gopls"]

[language-server.gopls]
command = "gopls"
config = { "gofumpt" = true, "local" = "goimports", "semanticTokens" = true, "staticcheck" = true, "verboseOutput" = true, "analyses" = { "fieldalignment" = true, "nilness" = true, unusedparams = true, unusedwrite = true, useany = true }, usePlaceholders = true, completeUnimported = true, hints = { "assignVariableType" = true, "compositeLiteralFields" = true, "compositeLiteralTypes" = true, "constantValues" = true, "functionTypeParameters" = true, "parameterNames" = true, "rangeVariableTypes" = true } }

#
#
# Markdown
#
# 
[[language]]
name = "markdown"
file-types = ["md"]
language-servers = ["mdpls"]
formatter = { command = "dprint", args = ["fmt", "-c", "~/..config/dprint.json", "--stdin", "md"] }
auto-format = true

[language-server.mdpls]
command = "~/.cargo/bin/mdpls"


[language-server.mdpls.config]
markdown.preview.auto = true
markdown.preview.browser = "firefox"

[[language]]
name = "json"
formatter = { command = "dprint", args = ["fmt", "-c", "~/.config/dprint.json", "--stdin", "json"] }
auto-format = true

[[language]]
name = "yaml"
auto-format = true
formatter = { command = 'prettier', args = ["--parser", "yaml"] }

[[language]]
name = "toml"
formatter = { command = "dprint", args = ["fmt", "-c", "~/.config/dprint.json", "--stdin", "toml"] }
auto-format = true

[[language]]
name = "python"
language-servers = [ "ruff-lsp" ]

# In case you'd like to use ruff alongside black for code formatting:
formatter = { command = "black", args = ["--quiet", "-"] }
auto-format = true

[language-server.ruff-lsp]
command = "ruff-lsp"

